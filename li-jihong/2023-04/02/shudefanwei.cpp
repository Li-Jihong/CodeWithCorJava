//
// Created by BH on 2023-04-02.
// 算法标签： 二分

/*
整数二分步骤:
1.找一个区间[L，R]，使得答案一定在该区间中
2找一个判断条件，使得该判断条件具有二段性，并且答案一定是该二段性的分界点。
3.分析终点M在该判断条件下是否成立，如果成立，考虑答案在哪个区间;如果不成立，考虑答案在哪个区间;
4.如果更新方式写的是R = Mid，则不用做任何处理;如果更新方式写的是L= Mid，则需要在计算Mid时加上1。
 这样不会出现死循环！！！
 * */
/*
给定一个按照升序排列的长度为 n的整数数组，以及 q个查询。
对于每个查询，返回一个元素 k的起始位置和终止位置（位置从 0开始计数）。
如果数组中不存在该元素，则返回 -1 -1。
输入格式
第一行包含整数 n和 q，表示数组长度和询问个数。
第二行包含 n个整数（均在 1∼10000范围内），表示完整数组。
接下来 q行，每行包含一个整数 k，表示一个询问元素。
输出格式
共 q行，每行包含两个整数，表示所求元素的起始位置和终止位置。
如果数组中不存在该元素，则返回 -1 -1。
数据范围
1≤n≤100000
1≤q≤10000
1≤k≤10000
输入样例：
6 3
1 2 2 3 3 4
3
4
5
输出样例：
3 4
5 5
-1 -1
*/

#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
using namespace  std;

const int N = 100010;
int n, m;
int q[N];

int main() {
    scanf("%d%d", &n, &m);
    for(int i = 0; i< n; i++) scanf("%d", &q[i]);

    for(int i = 0 ; i < m; i++){
        int x;
        scanf("%d", &x);
        //二分左端点
        int l = 0, r = n - 1; // 确定区间的范围
        while(l  < r){
            int m = (l + r) >> 1;
            if(q[m] >= x) r = m;
            else  l = m  + 1;
        }

        if(q[r] == x){
            cout << r << ' ';
            //二分右端点
            r=  n -  1;  // 右端点一定在【左端点，n - 1】之间
            while(l < r){
                int m = l + r + 1 >> 1;
                if(q[m] <= x) l = m;
                else r = m - 1;
            }
            cout << l << endl;
        }
        else cout << "-1 -1" << endl;
    }
    return 0;
}








